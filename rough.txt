import { Request, Response } from "express";
import knex from "knex"; // Assuming you have your Knex configuration correctly set up
import bcrypt from "bcrypt";
import { Tenant } from "../models/Tenant"; // Import your Tenant model

class TenantController {
  async createTenant(args: {
    name: string;
    username: string;
    password: string;
    role: string;
    description: string;
  }) {
    try {
      const { name, username, password, role, description } = args;

      // Generate a database name based on the tenant's name
      const dbName = name.toLowerCase().replace(/[^a-zA-Z0-9]/g, "_");

      console.log(dbName);
      // Create a Knex instance for the tenant's database
      const tenantDB = knex({
        client: "mysql2",
        connection: {
          host: "localhost",
          user: "root",
          password: "root",
          database: dbName,
        },
      });

      const connectToDatabase = async () => {
        try {
          await tenantDB.raw("SELECT 1"); // Check the database connection
          console.log(" tenant Database connected successfully");
          return tenantDB;
        } catch (error: any) {
          console.error("Error connecting to the database:", error.message);
          throw error;
        }
      };

      connectToDatabase()
        .then((database) => {})
        .catch((error) => {
          console.error("Database connection error:", error);
        });

      // Use the main database connection to create the tenant's database
      await tenantDB.raw(`CREATE DATABASE IF NOT EXISTS ${dbName}`);

      // Switch to the tenant's database for further operations
      await tenantDB.raw(`USE ${dbName}`);

      // Check if the tenant already exists in the tenant's database
      const existingTenant = await tenantDB("tenant")
        .where({ username })
        .first();

      if (existingTenant) {
        throw new Error(
          "Tenant username already exists. Choose a different username."
        );
      }
      // Hash the password using bcrypt
      const hashedPassword = await bcrypt.hash(password, 10);

      // Create a new tenant record using your Tenant model
      const newTenant = new Tenant(
        0,
        name,
        username,
        hashedPassword,
        role,
        description
      );

      // Insert the tenant record into the 'tenant' table
      await tenantDB("tenant").insert(newTenant);
      return { message: "Tenant and database created successfully" };
    } catch (error: any) {
      throw new Error(error.message);
    }
  }
}

export default new TenantController();



module.exports = {
  development: {
    client: "mysql2",
    connection: {
      host: "localhost",
      user: "root",
      password: "root",
      database: "saas-product",
    },
    migrations: {
      directory: "./db/migrations",
    },
    seeds: {
      directory: "./db/seeds",
    },
  },
  // Add more configurations for other environments if needed (e.g., production, test).
};


// Use require instead of import for Knex
const { Knex } = require("knex");

exports.up = function (knex) {
  return knex.schema.createTable("tenant", (table) => {
    table.increments("id").primary();
    table.string("name").notNullable();
    table.string("username").notNullable().unique();
    table.string("password").notNullable();
    table.string("description");
    table.string("role").defaultTo("tenant");
  });
};

exports.down = function (knex) {
  return knex.schema.dropTable("tenant");
};


const { Knex } = require("knex");

exports.up = async function (knex) {
  return knex.schema.createTable("tenant", (table) => {
    table.increments("id").primary();
    table.string("name").notNullable();
    table.string("username").notNullable().unique();
    table.string("password").notNullable();
    table.string("description");
    table.string("role").defaultTo("tenant");
  });
};

exports.down = async function (knex) {
  return knex.schema.dropTable("tenant");
};


import knex, { Knex } from "knex";

import bcrypt from "bcrypt";
import { Tenant } from "../models/Tenant";

class TenantController {
  tenantDB: Knex;

  constructor() {
    // Initialize the common database connection
    this.tenantDB = knex({
      client: "mysql2",
      connection: {
        host: "localhost",
        user: "root",
        password: "root",
        database: "saas-product", // Use the common database
      },
    });
  }

  async createTenant(args: {
    name: string;
    username: string;
    password: string;
    role: string;
    description: string;
  }) {
    try {
      const { name, username, password, role, description } = args;

      // Generate a schema name based on the tenant's name
      const schemaName = name.toLowerCase().replace(/[^a-zA-Z0-9]/g, "_");

      // Create a schema within the common database for the tenant
      await this.tenantDB.raw(`CREATE SCHEMA IF NOT EXISTS ${schemaName}`);

      // Check if the tenant already exists in the common database
      const existingTenant = await this.tenantDB("tenant")
        .where({ username })
        .first();

      if (existingTenant) {
        throw new Error(
          "Tenant username already exists. Choose a different username."
        );
      }

      // Hash the password using bcrypt
      const hashedPassword = await bcrypt.hash(password, 10);

      // Create a new tenant record using your Tenant model
      const newTenant = new Tenant(
        0,
        name,
        username,
        hashedPassword,
        role,
        description
      );

      // Insert the tenant record into the 'tenant' table within the common database
      await this.tenantDB("tenant").insert(newTenant);

      return { message: "Tenant and schema created successfully" };
    } catch (error: any) {
      throw new Error(error.message);
    }
  }
}

export default new TenantController();
